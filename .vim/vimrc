" Debug statements (And/or locate logs with :YcmDebugInfo)
" let g:ycm_server_keep_logfiles = 1
" let g:ycm_server_log_level = 'debug'

""""""""""""""""""""
" Helper Functions "
""""""""""""""""""""

" https://github.com/airblade/vim-gitgutter/issues/260#issuecomment-220057036
function! PrevHunkWrap(count)
  for i in range(1, a:count)
    let line = line('.')
    silent GitGutterPrevHunk
    if line('.') == line
      normal G
      silent GitGutterPrevHunk
    endif
  endfor
endfunction

function! NextHunkWrap(count)
  for i in range(1, a:count)
    let line = line('.')
    silent GitGutterNextHunk
    if line('.') == line
      normal 1G
      silent GitGutterNextHunk
    endif
  endfor
endfunction

" Returns 1 if buffer is in an open window somewhere, 0 otherwise
" https://stackoverflow.com/a/14427211/4747661
function! IsBufferVisible(bufNo)
    for tabNo in range(1, tabpagenr("$"))
        for bufInTab in tabpagebuflist(tabNo)
            if (bufInTab == a:bufNo)
                return 1
            endif
        endfor
    endfor
    return 0
endfunction

" https://stackoverflow.com/a/6561076
function! DeleteEmptyBuffers()
    let [i, n; empty] = [1, bufnr('$')]
    while i <= n
        if bufexists(i) && bufname(i) == '' && !IsBufferVisible(i)
            call add(empty, i)
        endif
        let i += 1
    endwhile
    if len(empty) > 0
        exe 'bdelete' join(empty)
    endif
endfunction

" https://stackoverflow.com/a/6271254/4747661
function! s:get_visual_selection()
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return '
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

""""""""""""""""""
" General Config "
""""""""""""""""""
set backspace=indent,eol,start
set nobackup
set history=500
set ruler
set background=dark
set showcmd
set incsearch
set hlsearch
set tabstop=4
set softtabstop=4
set shiftwidth=4
set scrolloff=1
set expandtab
set number
set autoindent
"setlocal omnifunc=phpcomplete#CompletePHP  " Enable for PHP completion when tern/YCM/... is setup?
set fileformat=unix
set ff=unix
set smartindent                     " Easy indentation
"filetype indent on                 " Commented this line out as breaks next line auto-indentation in normal editing
set nofixendofline                  " No auto line end of file -- https://stackoverflow.com/a/16114535
set hidden                          " Hide buffers rather than abandon them when not showing  - Makes switching buffers without saving work without!
set timeoutlen=350 ttimeoutlen=0    " Instant into normal mode http://goo.gl/aLffUZ (& shorter timeout for key combinations)

" Wrap line in git diffs (Triggers when using git-fugitive's :Gdiff)
" https://stackoverflow.com/a/17329864
autocmd FilterWritePre * if &diff | setlocal wrap< | endif

" Was getting 'E239: Invalid sign text: ~\~W' on MacOS install
" * I think MacOS is POSIX default, and we want UTF8
" * https://github.com/vim-syntastic/syntastic/issues/755#issuecomment-22663808
" Also YCM was complaining about utf-8 on Windows vim
set encoding=utf-8  " The encoding displayed.
set fileencoding=utf-8  " The encoding written to file.

" Highlight cursor line of active window
" * Helps when multiple windows open especially, though still helpful single line
" * http://vim.wikia.com/wiki/Highlight_current_line
hi CursorLine   cterm=NONE ctermbg=Brown ctermfg=White guibg=Brown guifg=White
augroup CursorLine
	au!
	au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
	au WinLeave * setlocal nocursorline
augroup END

" Windows height auto-resizing
function! CalcMyWinHeight()
    let optimalHeight = float2nr(str2float(&lines)*2/3)
    let maxHeight = &lines - 7 " So at least 4 rows show on 2nd vertically stacked split
    return min([optimalHeight, maxHeight])
endfunction
" TODO: DRY syntax, move more into function
:autocmd VimResized * :exe "set winheight=" . CalcMyWinHeight()
:autocmd VimEnter * :exe "set winheight=" . CalcMyWinHeight()
" TODO: Make the following resize work on window resize -- but only if there are > 2 in horizontal split
" :autocmd VimResized * :exe "resize " . CalcMyWinHeight()

" Windows VIM
if has("win32")
	"" Share windows clipboard in windows vim & make paste mappings both come from this system clipboard
	" Copy/paste to system clipboard
	set clipboard=unnamed
endif

if has("unix")
    " Mac gVIM
    " https://stackoverflow.com/a/9200871
	if has("gui_macvim")
        set clipboard=unnamed
        set guifont=Menlo\ Regular:h16
	endif

    " Mac terminal VIM
    " https://stackoverflow.com/a/2842811
    let s:uname = system("uname -s")
    if s:uname == "Darwin\n"
        " http://vim.wikia.com/wiki/Mac_OS_X_clipboard_sharing

        " Doesn't go from system >> VIM
        " set clipboard=unnamed

        " * Yanking breaks in VIM (At least when testing December 2017 on MacOS Sierra)
        " set clipboard=unnamedplus

        " Works!? - http://vimcasts.org/episodes/accessing-the-system-clipboard-from-vim/
        set clipboard=unnamed,unnamedplus
    endif
endif

"""""""""""""""""
" Misc Bindings "
"""""""""""""""""
"https://vim.fandom.com/wiki/Set_working_directory_to_the_current_file
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" Tabs not tags
nnoremap <silent> <c-t> <nop>
nnoremap <silent> <c-t><c-t> :tabnew<cr>
nnoremap <silent> <c-t><c-h> :-tabm<cr>
nnoremap <silent> <c-t><c-l> :+tabm<cr>
inoremap <silent> <c-t> <nop>
inoremap <silent> <c-t><c-t> <esc>:tabnew<cr>
inoremap <silent> <c-t><c-h> <esc>:-tabm<cr>
inoremap <silent> <c-t><c-l> <esc>:+tabm<cr>
if has('nvim')
    tnoremap <silent> <c-t> <nop>
    tnoremap <silent> <c-t><c-t> <c-\><c-n>:tabnew<cr>
    tnoremap <silent> <c-t><c-h> <c-\><c-n>:-tabm<cr>
    tnoremap <silent> <c-t><c-l> <c-\><c-n>:+tabm<cr>
endif
" Leader keys
let mapleader = "\<Space>"
let maplocalleader = ","
" https://stackoverflow.com/questions/446269/can-i-use-space-as-mapleader-in-vim
nnoremap <space> <Nop>
nnoremap <Leader>s :%s/<C-r><C-w>//g<Left><Left>
autocmd Filetype typescript,javascript.jsx,javascript nnoremap <leader>d odebugger<esc>i
autocmd Filetype typescript,javascript.jsx,javascript nnoremap <leader>D Odebugger<esc>i
autocmd Filetype typescript,javascript.jsx,javascript nnoremap <leader>w oconsole.warn()<esc>i
autocmd Filetype typescript,javascript.jsx,javascript nnoremap <leader>W Oconsole.warn()<esc>i
nmap <silent> gd <Plug>(coc-definition)
" \ as Join line as J is taken by move line down
nnoremap \ <s-J>
" <c-s> to save
" * https://stackoverflow.com/q/3446320/4747661
" * http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files
" * + Jump to next ALE linting error. May jump to things that will be auto-fixed in a second.
noremap <silent> <c-s>          :ALENextWrap<cr>:update<cr>
vnoremap <silent> <c-s>         <c-c>:update<cr>gv
inoremap <silent> <c-s>         <c-o>:ALENextWrap<cr><c-o>:update<cr>
" Visual block - <c-q> is normal alt to <c-v> http://vimdoc.sourceforge.net/htmldoc/gui_w32.html#CTRL-Q
nnoremap <c-q> <c-v>
" Y act like C and D to end of line
nnoremap Y y$
" Training up to hard mode or medium mode
for prefix in ['i', 'n']
    for key in ['<Up>', '<Down>', '<Left>', '<Right>']
        exe prefix . "noremap " . key . " <Nop>"
    endfor
endfor
if !has("win32unix") && !has("win32")
    " airblade/vim-gitgutter
    noremap <Up> :call PrevHunkWrap(1)<cr>
    noremap <Down> :call NextHunkWrap(1)<cr>
endif
" Window sizing - http://flaviusim.com/blog/resizing-vim-window-splits-like-a-boss/
nnoremap <silent> + :exe "resize " . (winheight(0) * 5/4)<cr>:exe "vertical resize " . (winwidth(0) * 5/4)<cr>
nnoremap <silent> - :exe "resize " . (winheight(0) * 4/5)<cr>:exe "vertical resize " . (winwidth(0) * 4/5)<cr>
" Leader window opening by position
nnoremap <c-w><c-j> :rightbelow new<cr>
nnoremap <c-w><c-k> :leftabove  new<cr>
nnoremap <c-w><c-h> :leftabove  vnew<cr>
nnoremap <c-w><c-l> :rightbelow vnew<cr>
inoremap <c-w><c-j> <esc>:rightbelow new<cr>
inoremap <c-w><c-k> <esc>:leftabove  new<cr>
inoremap <c-w><c-h> <esc>:leftabove  vnew<cr>
inoremap <c-w><c-l> <esc>:rightbelow vnew<cr>
if has('nvim')
    tnoremap <c-w><c-j> <c-\><c-n>:rightbelow new<cr>
    tnoremap <c-w><c-k> <c-\><c-n>:leftabove  new<cr>
    tnoremap <c-w><c-h> <c-\><c-n>:leftabove  vnew<cr>
    tnoremap <c-w><c-l> <c-\><c-n>:rightbelow vnew<cr>
endif
" Delete buffer keeping window split
" https://stackoverflow.com/a/4468491/4747661
"* Same command as https://github.com/qpkorr/vim-bufkill but without whole plugin
command BD :bp\|bd #<cr>
nnoremap <silent> <leader>c :setlocal spell!<cr>:echo "Spelling toggled"<cr>

" Windows VIM
if has("win32")
	" <c-v> paste from system / unnamed register fallback? - https://stackoverflow.com/a/14786750/4747661
    " 2018-03-03: Removed <F10> wrapper as was just inserting it
	inoremap <silent> <c-v> <c-r>+
endif

" Not windows VIM / Cygwin VIM
if !has("win32unix") && !has("win32")
    " Visual block
    "" Capture ctrl-q http://stackoverflow.com/a/7884226
    "" * Slows windows startup time and not needed there nor cygwin
    silent !stty -ixon > /dev/null 2>/dev/null
endif

"""""""""""""""
" Vundle Init "
"""""""""""""""
" https://github.com/VundleVim/Vundle.vim :: update using ':PluginUpdate'
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
    Bundle 'neoclide/coc.nvim'
    Bundle 'Raimondi/delimitMate'
    Bundle 'VundleVim/Vundle.vim'
    Bundle 'altercation/vim-colors-solarized'
    Bundle 'alvan/vim-closetag'
    Bundle 'bronson/vim-trailing-whitespace'
    Bundle 'chrisbra/csv.vim'
    Bundle 'christoomey/vim-sort-motion'
    Bundle 'dbakker/vim-projectroot'
    Bundle 'flowtype/vim-flow'
    Bundle 'git@github.com:AnthonyAstige/ctrlhjkl.vim.git'
    Bundle 'git@github.com:AnthonyAstige/playaround.vim.git'
    Bundle 'haya14busa/incsearch.vim'
    Bundle 'heavenshell/vim-jsdoc'
    Bundle 'janko-m/vim-test'
    Bundle 'junegunn/fzf.vim'
    Bundle 'junegunn/vim-peekaboo'
    Bundle 'justincampbell/vim-eighties'
    Bundle 'kh3phr3n/tabline'
    Bundle 'machakann/vim-highlightedyank'
    Bundle 'myusuf3/numbers.vim'
    Bundle 'matze/vim-move'
    Bundle 'othree/jsdoc-syntax.vim'
    Bundle 'pangloss/vim-javascript'
    Bundle 'qpkorr/vim-bufkill'
    Bundle 'scrooloose/nerdtree'
    Bundle 'skywind3000/asyncrun.vim'
    Bundle 'ternjs/tern_for_vim'
    Bundle 'thinca/vim-prettyprint'
    Bundle 'tpope/vim-commentary.git'
    Bundle 'tpope/vim-fugitive'
    Bundle 'tpope/vim-surround'
    Bundle 'troydm/zoomwintab.vim'
    Bundle 'unblevable/quick-scope'
    Bundle 'vim-scripts/matchit.zip'
    Bundle 'vim-scripts/ReplaceWithRegister'
    Bundle 'dense-analysis/ale'
    Bundle 'wesq3/vim-windowswap'
    Bundle 'yuttie/comfortable-motion.vim'
    Bundle 'zirrostig/vim-schlepp'

    " Not windows VIM / Cygwin VIM (Remove unused & slow plugins)
    if !has("win32unix") && !has("win32")
        " Bundle 'Valloric/MatchTagAlways' " Failed on jest repository. TypeScript?
        Bundle 'airblade/vim-gitgutter'
        Bundle 'bling/vim-airline'
        Bundle 'sheerun/vim-polyglot'

        " Autocompletion team: YCM + UltiSnips + SuperTab (with optional Vim-snippits)
        Bundle 'Valloric/YouCompleteMe'
        Bundle 'SirVer/ultisnips'
        Bundle 'ervandew/supertab'
    endif
call vundle#end()

""""""""""""""""""""""""""
" Config for filetype since has to be off for vundle
""""""""""""""""""""""""""

" BrightIdea: .bix as PHP, .jsx as typescript
filetype plugin indent on	" required
filetype plugin on
" filetype on
autocmd BufNewFile,BufRead *.bix,*.php set filetype=php
" http://vim.wikia.com/wiki/Change_filetype_based_on_directory_path
" * Note this seems to hit all files of extension in subdirectories
autocmd BufNewFile,BufRead ~/main/fractal/components/primary/dropdown/*.jsx set filetype=typescript


"""""""""""""""""""""""""
" Vundle Bundles Config "
"""""""""""""""""""""""""

" Enable syntax highlighting -- must be after `filetype off`
syntax on

" christoomey/vim-sort-motion
let g:sort_motion_flags = "i"

" heavenshell/vim-jsdoc
let g:jsdoc_enable_es6 = "1"
let g:jsdoc_param_description_separator = ' - '
let g:jsdoc_allow_input_prompt = "1"
let g:jsdoc_input_description = "1"

" junegunn/vim-peekaboo
let g:peekaboo_delay = 2000

" altercation/vim-colors-solarized
set background=dark
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_termtrans = 1
colorscheme solarized
" Tweak to matching highlight easier to tell where cursor is without blinking
hi MatchParen cterm=none ctermbg=none ctermfg=magenta

" alvan/vim-closetag Config - Closetags xml on all file types desired (.jsx is important for React)
let g:closetag_filenames = "*.xml,*.html,*.xhtml,*.phtml,*.php,*.js*"
" Prevent <leader>> shortcut causing delay in insert mode, as mapped in insert mode
let g:closetag_close_shortcut = ''

" AnthonyAstige/ctrlhjkl
let g:ctrlhjkl_suppress_buffercycling = 1

" haya14busa/incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" junegunn/fzf.vim
set rtp+=~/.fzf
let g:fzf_layout = { 'down': '~50%' }
"===============================================================
" Make c-p insert visual selection into start of search
function! FzfGitFilesCurrSelection()
    let currSelection = s:get_visual_selection()
    if len(currSelection) > 0
        call fzf#vim#gitfiles('.', {'options': ['--query', currSelection]})
    else
        execute ':GitFiles'
    endif
endfunction
" * https://github.com/junegunn/fzf.vim#advanced-customization
" * https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2
command! -bang -nargs=* FZFGrep
    \ call fzf#vim#grep('rg --ignore-file ~/.bi-rg-ignore --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --color "always" '.shellescape(<q-args>),
    \ 1,
    \ <bang>0)
command! -bar -bang -nargs=* -complete=buffer FZFBufferLines  call fzf#vim#lines(<q-args>, <bang>0)
nnoremap <silent> <c-p><c-r> :Rg<cr>
nnoremap <silent> <c-p><c-p> :GFiles<cr>
" Git Files (ignore from .gitignore, get beyond cwd)
vnoremap <silent> <c-p><c-p> :call FzfGitFilesCurrSelection()<cr>
nnoremap <silent> <c-p><c-b> :silent! :call DeleteEmptyBuffers()<cr>:Buffers<cr>
vnoremap <silent> <c-p><c-b> "xy:silent! :call DeleteEmptyBuffers()<cr>:Buffers <c-r>x<cr>
nnoremap <c-g><c-g> :ProjectRootExe :FZFGrep<space>
vnoremap <c-g><c-g> "xy:ProjectRootExe :FZFGrep <c-r>x<cr>
nnoremap <c-g><c-b> :FZFBufferLines<cr>
vnoremap <c-g><c-b> "xy:FZFBufferLines <c-r>x<cr>

" justincampbell/vim-eighties
let g:eighties_minimum_width = 100

" machakann/vim-highlightedyank
let g:highlightedyank_highlight_duration = 150

" matze/vim-move
" * To work as <c-j> and <c-k>
" * First tried fix <A-j> and <A-k> as @ https://github.com/matze/vim-move/issues/8 / https://stackoverflow.com/a/10216459/4747661
" ** However this broke macro recording
let g:move_key_modifier = 'S'

" qpkorr/vim-bufkill
let g:BufKillCreateMappings = 0 " My own keymappings
nnoremap <c-x> :BD<cr>

" Raimondi/delimitMate - Prevent dupe > with alvan/vim-closetag
" * https://github.com/alvan/vim-closetag/issues/1#issuecomment-110613265
au FileType xml,html,phtml,php,xhtml,js let b:delimitMate_matchpairs = "(:),[:],{:}"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" JSX Auto-formatting for BrightIdea
" BrightIdea note: Remember to run `npm install` from fractal folder if needed
" * While we have a seperate `prettier` branch, after remove this comment?
" sheerun/vim-polyglot
" Stop Polyglot from setting `*.js` files to `javascript.jsx` filetype https://github.com/sheerun/vim-polyglot/issues/162#issuecomment-261956326
let g:jsx_ext_required = 1

" w0rp/ale
nnoremap <silent> <leader>a <nop>
nnoremap <silent> <leader>aj :ALENextWrap<cr>
nnoremap <silent> <leader>ak :ALEPreviousWrap<cr>

" Use prettier then eslint - https://github.com/w0rp/ale/issues/683#issuecomment-310635861
" * Works from local repository prettier / eslint installs and will only apply if it can find them
" ** NOT SURE THIS IF/HOW THIS APPLIES ANYMORE WITH GLOBALS
let g:ale_fixers = {}
let g:ale_fixers['jsx'] = ['prettier', 'eslint']
" let g:ale_fixers['json'] = ['prettier']
" This only seems to work with .jsx extension files and not .ts extension (maybe would need tslint)
let g:ale_fixers['typescript'] = ['prettier', 'eslint']
" Only run these linters
let g:ale_linters = {
\   'jsx': ['flow'],
\   'javascript': ['flow'],
\   'typescript': ['eslint'],
\}
let g:ale_linters_explicit = 1
" Fix on save
" let g:ale_fix_on_save = 1
" TODO: Map to <c-s>, so always format even if no save needed
func StuffIffNoErrors()
    " TODO: Make ALE check for errors synchronously before save
    " TODO: Maybe useful:
    " TODO: * ale#engine#IsCheckingBuffer(buffer)             *ale#engine#IsCheckingBuffer()*
	let l:list = ale#engine#GetLoclist(bufnr('%'))
    if(len(l:list) != 1)
		exe ":ALEFix"
        " janko-m/vim-test
        " if test#exists() |
        " \   TestFile |
        " \ endif
	else
		let l:list = ale#engine#GetLoclist(bufnr('%'))
		let l:text = list[0].text
		if(text !~ "Parsing error:.*")
			exe ":ALEFix"
            " janko-m/vim-test
            " if test#exists() |
            " \   TestFile |
            " \ endif
		endif
    endif
endfunc
autocmd BufWritePost *.ts,*.tsx,*.jsx,*.json call StuffIffNoErrors()
" Fix GitGutter after formatting cleanup
autocmd User ALEFixPost exe ":GitGutter"
" Use (faster) daemon processes
let g:ale_javascript_eslint_use_global = 0
let g:ale_javascript_eslint_executable = 'eslint_d'
" Don't use prettier_d and eslint_d together -- causes errors when loading file with fzf -- race condition? Something odd? Dunno. Anyways this seems to work and gets 90% of the speed anyways as eslint is much slower to run cold than prettier.
" let g:ale_javascript_prettier_use_global = 1
" let g:ale_javascript_prettier_executable = 'prettier_d'
" ale gutter signs
let g:ale_sign_error = "✗"
let g:ale_sign_warning = "W"
let g:ale_sign_style_warning = "W"
let g:ale_sign_style_error = "✗"
" END: JSX Auto-formatting for BrightIdea
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" pangloss/vim-javascript
" Flow syntax highlighting https://github.com/flowtype/vim-flow/issues/45#issuecomment-258456202
let g:javascript_plugin_flow = 1

" scrooloose/nerdtree
function! NERDTreeToggleInCurDir()
    " If NERDTree is open in the current buffer
    if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
        exe ":NERDTreeClose"
    else
        if (expand("%:t") != '')
            exe ":NERDTreeFind %"
        else
            exe ":NERDTree"
        endif
    endif
endfunction
" nnoremap <silent> <c-o> :call NERDTreeToggleInCurDir()<cr>
let g:NERDTreeWinSize=80
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = 'V'
let NERDTreeIgnore = ['\.png$', 'desktop.ini', '\.swp$'] " Ignore some common windows files
let NERDTreeQuitOnOpen=1
" https://github.com/scrooloose/nerdtree/issues/605#issuecomment-253639821
" Keep my <c-j> / <c-k> bindings
let g:NERDTreeMapJumpNextSibling="☻"
let g:NERDTreeMapJumpPrevSibling="☺"
let g:NERDTreeMapUpdir="h"
let g:NERDTreeMapChangeRoot="l"

" ternjs/tern_for_vim
"enable keyboard shortcuts, map with regular leader
let g:tern_map_keys = 1

" skywind3000/asyncrun.vim
augroup MyGroup
    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(8, 1)
    autocmd User AsyncRunStop :cclose
augroup END
nnoremap <leader>gp :AsyncRun git push<cr>

" tpope/vim-fugitive
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gl :Git log<cr>

" unblevable/quick-scope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" wesq3/vim-windowswap
let g:windowswap_map_keys = 0
nnoremap <silent> <c-w><c-w> :call WindowSwap#EasyWindowSwap()<cr>
if has('nvim')
    tnoremap <silent> <c-w><c-w> <c-\><c-n>:call WindowSwap#EasyWindowSwap()<cr>
endif
inoremap <silent> <c-w><c-w> <esc>:call WindowSwap#EasyWindowSwap()<cr>

" yuttie/comfortable-motion.vim
let g:comfortable_motion_no_default_key_mappings = 1
let g:comfortable_motion_impulse_multiplier = 1  " Feel free to increase/decrease this value.
nnoremap <silent> <c-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<cr>
nnoremap <silent> <c-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<cr>
let g:comfortable_motion_interval = 1000/1000
let g:comfortable_motion_friction = 80.0
let g:comfortable_motion_air_drag = 2.0

" Matching scrooloose/nerdtree & junegunn/fzf.vim
" Inside selection
"  <c-t> - Open the selected file in a new 'tab'
"  <c-s> - Open the selected file in a 'horizontal' split
"  <c-x> - Open the selected file in a 'vertical' split
"  <esc> - Closes search window
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'vsplit',
  \ 'ctrl-s': 'split' }
" NERDTree mappings in ~/.nerdtree-mymapping.vim

" bling/vim-airline
" Note: This was all under 'Not windows VIM / Cygwin VIM' before 2022,
" probably would work there anyways
set laststatus=2					" * https://github.com/bling/vim-airline/issues/130
" https://vi.stackexchange.com/questions/3359/how-do-i-fix-the-status-bar-symbols-in-the-airline-plugin
let g:airline_powerline_fonts = 1

" if !exists('g:airline_symbols')
"   let g:airline_symbols = {}
" endif
"
" " unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
" let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
" let g:airline_symbols.whitespace = 'Ξ'
"
" " airline symbols
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''


" Not windows VIM / Cygwin VIM
if !has("win32unix") && !has("win32")
    " airblade/vim-gitgutter
    set signcolumn=yes
    highlight clear SignColumn
    highlight GitGutterAdd ctermfg=green
    highlight GitGutterChange ctermfg=yellow
    highlight GitGutterDelete ctermfg=red
    highlight GitGutterChangeDelete ctermfg=yellow
    " Display in all open windows on open
    autocmd VimEnter * if winnr() != winnr('$') | :GitGutterAll | endif

    " Valloric/MatchTagAlways
    " Work for JSX https://github.com/Valloric/MatchTagAlways/issues/30
    let g:mta_filetypes = {
                \ 'typescript': 1,
                \ 'javascript.jsx': 1,
                \ 'html' : 1,
                \ 'xhtml' : 1,
                \ 'xml' : 1,
                \}

    " Valloric/YouCompleteMe
	let g:ycm_complete_in_comments = 1
	" https://github.com/Valloric/YouCompleteMe/issues/413#issuecomment-66827568
	let g:ycm_semantic_triggers = {
		\   'css': [ 're!^\s{4}', 're!:\s+'],
		\   'scss': [ 're!^\s{4}', 're!:\s+'],
        \   'typescript': ['.'],
        \   'javascript.jsx': ['.']
		\ }
    " https://vi.stackexchange.com/a/6850
    let g:ycm_autoclose_preview_window_after_insertion = 1
    let g:ycm_autoclose_preview_window_after_completion = 1

    " Autocompletion team: Valloric/YouCompleteMe + SirVer/ultisnips + ervandew/supertab + (optional) honza/vim-snippets
    " Make YCM compatible with UltiSnips (using supertab)
    " http://stackoverflow.com/a/22253548/1626737
    " http://chauncey.io/ultisnips-youcompleteme-now-if-i-can-just-get-you-two-to-cooperate/
    let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
    let g:SuperTabDefaultCompletionType    = '<C-n>'
    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsJumpForwardTrigger      = '<tab>'
    let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
    " Make return work
    " https://github.com/SirVer/ultisnips/issues/376#issuecomment-55938810
    let g:UltiSnipsExpandTrigger = "<nop>"
    let g:ulti_expand_or_jump_res = 0
    function! <SID>ExpandSnippetOrReturn()
        let snippet = UltiSnips#ExpandSnippetOrJump()
        if g:ulti_expand_or_jump_res > 0
            return snippet
        else
            return "\<cr>"
        endif
    endfunction
    inoremap <silent> <expr> <cr> pumvisible() ? "<c-r>=<SID>ExpandSnippetOrReturn()<cr>" : "\<cr>"

    " zirrostig/vim-schlepp
    vmap  <up>    <Plug>SchleppUp
    vmap  <down>  <Plug>SchleppDown
    vmap  <left>  <Plug>SchleppLeft
    vmap  <right> <Plug>SchleppRight

    " Help UltiSnips find snipetts: https://github.com/SirVer/ultisnips/issues/264#issuecomment-243413440
    set rtp+=~/.vim
    "...
    let g:UltiSnipsSnippetsDir = "~/.vim/snips"
    let g:UltiSnipsEnableSnipMate=0
    let g:UltiSnipsSnippetDirectories=["snips"]
    let g:UltiSnipsEditSplit= "context"
endif

" NeoVim specific
if has('nvim')
    " NeoVim live substitution feedback http://vimcasts.org/episodes/neovim-eyecandy/
    set inccommand=split
    """"""""""""""""""
    " Terminal stuff "
    """"""""""""""""""
    " Ability to paste (Note: we lose <c-r> for command history)
    :tnoremap <expr> <c-r> '<c-\><c-n>"'.nr2char(getchar()).'pi'

    " Leave terminal insert mode on leave
    " https://vi.stackexchange.com/a/3765
    :autocmd BufLeave term://* stopinsert

    " Open inserting terminal from any mode into, +non-fzf mapping fixes
    func MapTermStuff()
        "
        " Move end of file before leave: keep terminal scrolling
        " * Note: tnoremap CtrlHJKL J & K also needed to stop conflict with fzf
        " * TODO: DRY these mappings, or move code into ctrlhjkl.vim plugin somehow
        :tnoremap <buffer> <c-h> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoHn"<cr>
        :tnoremap <buffer> <c-j> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoJn"<cr>
        :tnoremap <buffer> <c-k> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoKn"<cr>
        :tnoremap <buffer> <c-l> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoLn"<cr>

        :nnoremap <buffer> <c-h> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoHn"<cr>
        :nnoremap <buffer> <c-j> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoJn"<cr>
        :nnoremap <buffer> <c-k> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoKn"<cr>
        :nnoremap <buffer> <c-l> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoLn"<cr>

        :inoremap <buffer> <c-h> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoHn"<cr>
        :inoremap <buffer> <c-j> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoJn"<cr>
        :inoremap <buffer> <c-k> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoKn"<cr>
        :inoremap <buffer> <c-l> <c-\><c-N>G:execute "normal \<Plug>CtrlHJKLGoLn"<cr>

        " Esc to exit
        " * https://neovim.io/doc/user/nvim_terminal_emulator.html
        :tnoremap <buffer> <Esc> <c-\><c-n>
    endfunc
    :nnoremap <c-w><c-t> :term<cr>:call MapTermStuff()<cr>i
    :vnoremap <c-w><c-t> <esc>:term<cr>:call MapTermStuff()<cr>i
    :inoremap <c-w><c-t> <esc>:term<cr>:call MapTermStuff()<cr>i
endif

""""""""""""""""""""""""""
" Spelling stuff
" Spelling mode when in git commit or markdown
autocmd FileType gitcommit,markdown setlocal spell
" Autocomplete with dictionary words when spell check is on
"  * TODO: Fix for gitcommit FileType
set complete+=kspell
" Highlighting didn't work higher in this file, because reset elsewhere? Maybe by solarized?
highlight SpellBad ctermbg=0 ctermfg=1
" END: Spelling stuff
""""""""""""""""""""""""""

" Allow editing CronTab on MacOS https://superuser.com/a/907889
autocmd filetype crontab setlocal nobackup nowritebackup

" From FB 2019-06-23 https://fburl.com/wiki/hm620syv
" use the same Python 3 as python3-nvim
" let g:python3_host_prog='/usr/bin/python3'
" same for Python 2
let g:python_host_prog='/usr/bin/python2'
